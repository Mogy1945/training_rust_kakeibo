// NOTE: Rustの標準ライブラリからioモジュールをインポート。
//       ioモジュールは入出力に関する機能を提供し、ここでは標準入力を扱うために使用。
// NOTE: 標準入力とは、ユーザーがキーボードからプログラムにデータを入力する手段。
//       コンソールやターミナルを通じてプログラムに情報を提供できる。
// NOTE: use・・・インポート。例えば、std::ioモジュールを使うことで、std::io::stdin()の代わりにstdin()関数を直接使用できる。
// NOTE: std・・・Rustの標準ライブラリ。
use std::io;
use kakeibo::services;

const FILE_PATH: &str = "store/data.json";

// NOTE: Rustプログラムの実行はmain関数から始まる。
//       この関数はプログラムのエントリーポイントであり、ここに記述されたコードが最初に実行される。
fn main() {
    // NOTE: 標準入力した値を格納するためのSTRINGを用意する
    //       String::new()で空の文字列を代入
    // 自分の言葉で説明: String型・mutableのservice_type変数を定義し、空文字を代入する。
    let mut service_type: String = String::new();
    // NOTE: println!はユーザーにメッセージを表示するマクロ。
    //       マクロはコンパイル時に展開され、マクロの呼び出しを具体的なコードに置き換える。
    //       「!」が末尾に付くもの。コードを生成するRustの機能。
    println!("実行したい内容を入力してください（0:登録、1:集計）");
    // NOTE: 値を格納する文字列の可変参照を渡し、unwrapでエラーハンドリングを行う。
    //       unwrap()・・・値を取り出し、値が存在しない場合にpanicを発生させる。
    //       read_line()・・・標準入力から値を読み込む。
    //       「&」・・・イミュータブルな参照。「&mut」・・・ミュータブルな参照。
    //       参照の種類を示すことで、コンパイル時にデータ競合を防ぐことができる。
    io::stdin().read_line(&mut service_type).unwrap();
     // NOTE: 標準入力では数値を入力しても文字列として扱われるので、数値に変換する。
     // NOTE: 標準入力からの値には、改行コードやスペースなどが混入する可能性があるので、TRIMメソッドで取り除く。
     // NOTE: parseで文字列から数値に変換する。※parseは型を推論しないので、指定する必要がある。
     // NOTE: u8にパースできない値が来た時は、result型のErrを返す。Errの時にexpectのmsg返す。
     // NOTE: expect()は、変換が失敗した時にメッセージを表示し、パニックを起こす。
     //       関数の実行を停止し、スタックを巻き戻してエラーメッセージを返す。デフォルトではプログラムはクラッシュする。
     //       スタックの巻き戻しでは、現在の関数のクリーンアップ、スタックの巻き戻し、リソースの解放の繰り返しが行われる。
    let service_type: u8 = service_type.trim().parse().expect("数値を入力してください");
    
    /******************************************************************************************
    *`services::validate::InputValidator::validate_service_type(service_type);`についての解説です。
    *******************************************************************************************
    * Rustでは、`::`を使用してモジュール、サブモジュール、関数、または構造体にアクセスします。
    * このコード行は、`services`モジュール内の`validate`サブモジュールにある`InputValidator`構造体のクラスメソッド（または静的メソッド）`validate_service_type`を呼び出しています。
    *
    * `service_type`は、このメソッドに渡される引数で、ユーザーからの入力値（通常は数値）を表します。
    * `validate_service_type`メソッドは、この`service_type`引数が特定の条件（例えば、0または1であること）を満たしているかを検証します。
    *
    * 検証が成功すれば、プログラムは通常通り続行します。
    * 検証に失敗した場合（つまり、`service_type`が0または1以外の場合）、`validate_service_type`メソッドはエラーメッセージを表示し、プログラムを強制終了させます。
    *
    * このコード行は、ユーザー入力のバリデーションを行う重要な部分であり、プログラムが期待する値のみを受け付けるようにするために使用されます。
    *******************************************************************************************/
    services::validate::InputValidator::validate_service_type(service_type);
    
    //　NOTE: バリデーションを通過した場合、service_typeは0か1になる。
    if service_type == 0 {
        services::register::run(FILE_PATH);
    } else if service_type == 1 {
        println!("集計サービス");
    }
}
